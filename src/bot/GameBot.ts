import { Bot, Context, session, SessionFlavor, Keyboard } from 'grammy';
import { IGameService, IGame } from '../types';
import { NotificationService } from '../services/NotificationService';
import logger from '../utils/logger';

interface SessionData {
  gameUrl?: string;
  category?: string;
  awaitingCategories?: boolean;
  awaitingPlayers?: boolean;
  players?: number;
}

type BotContext = Context & SessionFlavor<SessionData>;

export class GameBot {
  private bot: Bot<BotContext>;
  private gameService: IGameService;
  private notificationService: NotificationService;

  constructor(token: string, gameService: IGameService) {
    this.bot = new Bot<BotContext>(token);
    this.gameService = gameService;
    this.notificationService = new NotificationService(this.bot, gameService);

    this.bot.use(
      session({
        initial: (): SessionData => ({
          gameUrl: undefined,
          category: undefined,
          awaitingCategories: false,
          awaitingPlayers: false,
          players: undefined,
        }),
      })
    );

    this.setupCommands();
    this.setupPriceChecking();
    logger.info('GameBot initialized');
  }

  private setupCommands(): void {
    this.bot.command('start', this.handleStart.bind(this));
    this.bot.command('add', this.handleAdd.bind(this));
    this.bot.command('list', this.handleList.bind(this));
    this.bot.command('check_prices', this.handleCheckPrices.bind(this));
    this.bot.command('help', this.handleHelp.bind(this));
    this.bot.command('set_notifications', this.handleSetNotifications.bind(this));
    this.bot.command('remove_notifications', this.handleRemoveNotifications.bind(this));

    // Handle URL input after /add command
    this.bot.on('message:text', this.handleMessage.bind(this));

    this.bot.api.setMyCommands([
      {
        command: 'start',
        description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      },
      {
        command: 'add',
        description: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É',
      },
      {
        command: 'list',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä',
      },
      {
        command: 'check_prices',
        description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã',
      },
      {
        command: 'set_notifications',
        description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ',
      },
      {
        command: 'remove_notifications',
        description: '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ',
      },
      {
        command: 'help',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å',
      },
    ]);
  }

  private setupPriceChecking(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(
      () => {
        this.notificationService.checkPricesAndNotify().catch(error => {
          console.error('Failed to check prices:', error);
        });
      },
      24 * 60 * 60 * 1000
    );
  }

  private async handleStart(ctx: BotContext): Promise<void> {
    const isGroup = ctx.chat?.type === 'supergroup';
    const message = isGroup
      ? '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä. \n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä\n' +
        '/check_prices - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã\n' +
        '/set_notifications - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ\n' +
        '/remove_notifications - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'
      : '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä. \n\n' +
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É —Å —Ç–æ–ø–∏–∫–∞–º–∏.\n' +
        '–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ.';

    await ctx.reply(message);
  }

  private async handleAdd(ctx: BotContext): Promise<void> {
    logger.debug('Handling /add command', { chatId: ctx.chat?.id });

    const url = ctx.match;
    if (!url) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É –≤ Steam>');
      return;
    }

    if (!url.toString().includes('store.steampowered.com')) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam');
      return;
    }

    const processingMsg = await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...');

    try {
      const parsedGame = await this.gameService.parser.parseGame(url.toString());

      if (!parsedGame.title) {
        logger.warn('Failed to parse game title', { chatId: ctx.chat?.id, url });
        await ctx.reply(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        );
        if (ctx.chat?.id) {
          await ctx.api.deleteMessage(ctx.chat.id, processingMsg.message_id);
        }
        return;
      }

      ctx.session.gameUrl = url.toString();
      ctx.session.awaitingPlayers = true;
      logger.info('Successfully parsed game', {
        chatId: ctx.chat?.id,
        url,
        title: parsedGame.title,
      });

      if (ctx.chat?.id) {
        await ctx.api.deleteMessage(ctx.chat.id, processingMsg.message_id);
      }
      await ctx.reply(
        `‚úÖ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: ${parsedGame.title}\n` + '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
      );
    } catch (error) {
      logger.error('Error processing Steam URL', { chatId: ctx.chat?.id, url, error });
      if (ctx.chat?.id) {
        await ctx.api.deleteMessage(ctx.chat.id, processingMsg.message_id);
      }
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleMessage(ctx: BotContext): Promise<void> {
    const text = ctx.message?.text;
    const chatId = ctx.chat?.id;

    if (!text || !chatId) {
      logger.warn('Received message without text or chatId');
      return;
    }

    logger.debug('Processing message', { chatId, text: text.substring(0, 50) });

    if (ctx.session.gameUrl && ctx.session.awaitingPlayers) {
      const players = parseInt(text);
      if (isNaN(players) || players < 1) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return;
      }

      ctx.session.players = players;
      ctx.session.awaitingPlayers = false;
      ctx.session.awaitingCategories = true;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      try {
        const categories = await this.gameService.getCategories();
        const keyboard = new Keyboard();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ 2 –≤ —Ä—è–¥
        for (let i = 0; i < categories.length; i += 2) {
          const row = [categories[i]];
          if (i + 1 < categories.length) {
            row.push(categories[i + 1]);
          }
          keyboard.text(row[0]);
          if (row.length > 1) {
            keyboard.text(row[1]);
          }
          keyboard.row();
        }

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã:', { reply_markup: keyboard });
      } catch (error) {
        logger.error('Error getting categories', { error });
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      }
      return;
    }

    if (ctx.session.gameUrl && ctx.session.awaitingCategories) {
      logger.info('Processing category', { chatId, category: text });
      const processingMsg = await ctx.reply('‚è≥ –î–æ–±–∞–≤–ª—è—é –∏–≥—Ä—É...');

      try {
        const game: IGame = {
          url: ctx.session.gameUrl,
          platform: 'steam',
          category: text,
          players: ctx.session.players || 1,
          basePrice: 0,
          currentPrice: 0,
          title: '', // Will be parsed
        };

        logger.debug('Adding game with data', { game });
        await this.gameService.addGame(game);
        logger.info('Game successfully added', {
          chatId,
          url: ctx.session.gameUrl,
          category: text,
          players: ctx.session.players,
        });

        await ctx.api.deleteMessage(chatId, processingMsg.message_id);
        await ctx.reply('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', {
          reply_markup: { remove_keyboard: true },
        });
      } catch (error) {
        logger.error('Error adding game', {
          chatId,
          url: ctx.session.gameUrl,
          category: text,
          error,
        });
        await ctx.api.deleteMessage(chatId, processingMsg.message_id);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }

      ctx.session.gameUrl = undefined;
      ctx.session.category = undefined;
      ctx.session.awaitingCategories = false;
      ctx.session.players = undefined;
      ctx.session.awaitingPlayers = false;
    }
  }

  private async handleList(ctx: BotContext): Promise<void> {
    try {
      const games = await this.gameService.getGames();
      if (games.length === 0) {
        await ctx.reply('–°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç');
        return;
      }

      const message = games
        .map(game => {
          return (
            `üéÆ [${game.title}](${game.url})\n` +
            `üí∞ –¶–µ–Ω–∞: ${game.basePrice > game.currentPrice ? `~${game.basePrice}~ ` : ''}${game.currentPrice || '–ù/–î'} —Ä—É–±\\.\n` +
            `üë• –ò–≥—Ä–æ–∫–æ–≤: ${game.players}\n` +
            `üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${game.category || '–ù/–î'}\n`
          );
        })
        .join('\n\n');

      await ctx.reply(message, { parse_mode: 'MarkdownV2' });
    } catch (error) {
      logger.error('Error getting game list', { error });
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä');
    }
  }

  private async handleCheckPrices(ctx: BotContext): Promise<void> {
    try {
      const games = await this.gameService.getGames();
      for (const game of games) {
        logger.info('Updating price for game', { id: game.id });

        if (game.id) {
          await this.gameService.updatePrice(game.id);
        } else {
          logger.warn('Game has no id', { game });
        }
      }
      await ctx.reply('–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã.');
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω');
    }
  }

  private async handleSetNotifications(ctx: BotContext): Promise<void> {
    try {
      const chatId = ctx.chat?.id;
      const threadId = ctx.message?.message_thread_id;

      if (!chatId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.');
        return;
      }

      if (ctx.chat?.type !== 'supergroup') {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å —Ç–æ–ø–∏–∫–∞–º–∏.');
        return;
      }

      if (!threadId) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ.');
        return;
      }

      await this.notificationService.setNotificationThread(chatId, threadId);
      await ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫!');
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    }
  }

  private async handleRemoveNotifications(ctx: BotContext): Promise<void> {
    try {
      const chatId = ctx.chat?.id;
      const threadId = ctx.message?.message_thread_id;

      if (!chatId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.');
        return;
      }

      if (ctx.chat?.type !== 'supergroup') {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å —Ç–æ–ø–∏–∫–∞–º–∏.');
        return;
      }

      if (!threadId) {
        await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ.');
        return;
      }

      await this.notificationService.removeNotificationSettings(chatId, threadId);
      await ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞.');
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    }
  }

  private async handleHelp(ctx: BotContext): Promise<void> {
    const isGroup = ctx.chat?.type === 'supergroup';
    const message = isGroup
      ? '–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n' +
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n' +
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä\n' +
        '/check_prices - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã\n' +
        '/set_notifications - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ\n' +
        '/remove_notifications - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ç–æ–ø–∏–∫–µ\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
        '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã:\n' +
        '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add\n' +
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam\n' +
        '3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)\n' +
        '4. –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã'
      : '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É —Å —Ç–æ–ø–∏–∫–∞–º–∏.\n' +
        '–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ.';

    await ctx.reply(message);
  }

  public start(): void {
    this.bot.start();
  }
}
